# generated by datamodel-codegen:
#   filename:  https://openholidaysapi.org/swagger/v1/swagger.json
#   timestamp: 2023-08-20T13:53:24+00:00

from __future__ import annotations

from datetime import date  # noqa: TCH003
from enum import Enum
from uuid import UUID  # noqa: TCH003

from pydantic import BaseModel, ConfigDict, Field


class CountryReference(BaseModel):
    model_config = ConfigDict(extra="allow", frozen=True)
    iso_code: str = Field(..., alias="isoCode", examples=["DE"], min_length=1)
    """
    Country ISO code
    """


class HolidayType(Enum):
    PUBLIC = "Public"
    BANK = "Bank"
    SCHOOL = "School"
    BACK_TO_SCHOOL = "BackToSchool"
    END_OF_LESSONS = "EndOfLessons"


class LocalizedText(BaseModel):
    model_config = ConfigDict(extra="allow", frozen=True)
    language: str = Field(..., min_length=1)
    """
    ISO-639-1 language code
    """
    text: str
    """
    The localized text
    """


class StatisticsResponse(BaseModel):
    model_config = ConfigDict(extra="allow", frozen=True)
    youngest_start_date: date = Field(..., alias="youngestStartDate")
    """
    The youngest holiday start date in the database
    """
    oldest_start_date: date = Field(..., alias="oldestStartDate")
    """
    The oldest holiday start date in the database
    """


class SubdivisionReference(BaseModel):
    model_config = ConfigDict(extra="allow", frozen=True)
    code: str = Field(..., examples=["DE-BE"], min_length=1)
    """
    Subdivision code
    """
    short_name: str = Field(..., alias="shortName", examples=["BE"], min_length=1)
    """
    Short name for display
    """


class SubdivisionResponse(BaseModel):
    model_config = ConfigDict(extra="allow", frozen=True)
    category: tuple[LocalizedText, ...] = Field(
        ...,
        examples=[
            {"language": "DE", "text": "Bundesland"},
            {"language": "EN", "text": "Federal state"},
        ],
    )
    """
    Localized categories of the subdivision
    """
    children: tuple[SubdivisionResponse, ...] | None = None
    """
    Child subdivisions
    """
    code: str = Field(..., examples=["DE-BE"], min_length=1)
    """
    Subdivision code
    """
    comment: tuple[LocalizedText, ...] | None = None
    """
    Localized comments of the subdivision
    """
    iso_code: str | None = Field(None, alias="isoCode", examples=["DE-BE"])
    """
    ISO 3166-2 subdivision code (if defined)
    """
    name: tuple[LocalizedText, ...] = Field(
        ..., examples=[{"language": "DE", "text": "Berlin"}, {"language": "EN", "text": "Berlin"}]
    )
    """
    Localized names of the subdivision
    """
    official_languages: tuple[str, ...] = Field(..., alias="officialLanguages")
    """
    Official languages as ISO-639-1 codes
    """
    short_name: str = Field(..., alias="shortName", examples=["BE"], min_length=1)
    """
    Short name for display
    """

    def get_name(self, country_code: str) -> str:
        for lang_name in self.name:
            if lang_name.language == country_code:
                name = lang_name.text
                if self.code == "DE-MV-ABS":
                    return "Mecklenburg-Vorpommern ABS"
                if self.code == "DE-MV-BBS":
                    return "Mecklenburg-Vorpommern BBS"
                return name
        raise ValueError(f"Country code {country_code} not found in subdivision {self.code}")


class CountryResponse(BaseModel):
    model_config = ConfigDict(extra="allow", frozen=True)
    iso_code: str = Field(..., alias="isoCode", examples=["DE"], min_length=1)
    """
    ISO 3166-1 country code
    """
    name: tuple[LocalizedText, ...] = Field(
        ...,
        examples=[
            {"language": "EN", "text": "Germany"},
            {"language": "DE", "text": "Deutschland"},
        ],
    )
    """
    Localized country names
    """
    official_languages: tuple[str, ...] = Field(..., alias="officialLanguages", examples=["DE"])
    """
    Official ISO-639-1 language codes
    """

    def get_name(self, country_code: str) -> str:
        for lang_name in self.name:
            if lang_name.language == country_code:
                return lang_name.text
        raise ValueError(f"Country code {country_code} not found in subdivision {self.iso_code}")


class HolidayByDateResponse(BaseModel):
    model_config = ConfigDict(extra="allow", frozen=True)
    comment: tuple[LocalizedText, ...] | None = None
    """
    Additional localized comments
    """
    country: CountryReference
    id: UUID = Field(..., examples=["ff3b77a3-8c31-47af-b1c7-f26dd51f3c19"])
    """
    Unqiue holiday id
    """
    name: tuple[LocalizedText, ...]
    """
    Localized names of the holiday
    """
    nationwide: bool = Field(..., examples=[True])
    """
    Is the holiday nationwide?
    """
    subdivisions: tuple[SubdivisionReference, ...] = Field(default_factory=list)
    """
    List of subdivision references
    """
    type: HolidayType


class HolidayResponse(BaseModel):
    model_config = ConfigDict(extra="allow", frozen=True)
    comment: tuple[LocalizedText, ...] | None = None
    """
    Additional localized comments
    """
    end_date: date = Field(..., alias="endDate", examples=["2022-12-31"])
    """
    End date of the holiday
    """
    id: UUID = Field(..., examples=["ff3b77a3-8c31-47af-b1c7-f26dd51f3c19"])
    """
    Unqiue holiday id
    """
    name: tuple[LocalizedText, ...]
    """
    Localized names of the holiday
    """
    nationwide: bool = Field(..., examples=[True])
    """
    Is the holiday nationwide?
    """
    start_date: date = Field(..., alias="startDate", examples=["2022-01-01"])
    """
    Start date of the holiday
    """
    subdivisions: tuple[SubdivisionReference, ...] = Field(default_factory=list)
    """
    List of subdivision references
    """
    type: HolidayType


class LanguageResponse(BaseModel):
    model_config = ConfigDict(extra="allow", frozen=True)
    iso_code: str = Field(..., alias="isoCode", examples=["DE"], min_length=1)
    """
    ISO-639-1 language code
    """
    name: tuple[LocalizedText, ...] = Field(
        ..., examples=[{"language": "DE", "text": "Deutsch"}, {"language": "EN", "text": "German"}]
    )
    """
    Localized language names
    """


SubdivisionResponse.model_rebuild()
